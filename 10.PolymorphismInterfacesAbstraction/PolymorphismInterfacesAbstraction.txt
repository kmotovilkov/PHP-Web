Polymorphism Interfaces Abstraction

Problem 1.	Define an Interface Person
Define an interface Person with two methods that should be implemented by a class: setName() and setAge().
Define a class Citizen which implements Person and has a constructor which takes a string name and an int age and uses the methods given by the interface. Write the methods and add a magic method __toString() which willl print the name and age of the person (example: Jackson, 35). 
 Create an instance of the class and use the magic method __toString() to print the name and age of the person.
Examples
Input	Output
Peter
25	Peter
25

Problem 2.	Multiple Implementation
Using the code from the previous task, define an interface Identifiable with a method setId(). In the class it will set a property called Id which is string. 
Define an interface Birthable with a method setBirthdate(). In the class it will set a property birthDate which is string.
Implement setId() and setBirthdate() in the Citizen class. Rewrite the Citizen constructor to accept the new parameters. Rewrite __toString() to output the persons Id and date of birth.
Examples
Input	Output
Peter
25
7706126789
12.06.1977	Peter
25
7706126789
12.06.1977

 

2.1. Implementing a method in two interfaces
Add a new method setIdBirtdate() which combines the functionality of setId() and setBirthdate().
In Identifiable it is defined like public function setIdBirtdate(int $Id, string $birthDate) and in Birthable it is   public function setIdBirtdate(string $birthDate, int $Id). Is it possible to create a method which will implement both interfaces? What would you have to do if it is not possible?  


Problem 3.	Ferrari
Model an application which contains a class Ferrari and an interface. Your task is simple, you have a car - Ferrari, its model is "488-Spider" and it has a driver. Your Ferrari should have functionality to use brakes and push the gas pedal. When the brakes are pushed down print "Brakes!", and when the gas pedal is pushed down - "Zadu6avam sA!". As you may have guessed this functionality is typical for all cars, so you should implement an interface to describe it. 
Your task is to create a Ferrari and set the driver's name to the passed one in the input. After that, print the info. Take a look at the Examples to understand the task better.
Input
On the single input line (CLI), you will be given the driver's name.
Output
On the single output line, print the model, the messages from the brakes and gas pedal methods and the driver's name. In the following format:
<model>/<brakes>/<gas pedal>/<driver's name>
Constraints
The input will always be valid, no need to check it explicitly! The Driver's name may contain any ASCII characters.
Example
Input	Output
Bat Giorgi	488-Spider/Brakes!/Zadu6avam sA!/Bat Giorgi
Dinko	488-Spider/Brakes!/Zadu6avam sA!/Dinko

 
3.1.	Static Property and Static Method in Ferrari
Create a static property called objNum of integer type which will increase every time you make an instance of a Ferrari.  You should change your constructor to use self::$objNum.
Create a static method called forUrl(string $str, string $rep="-") which replaces all appearances of space (" ") with another character and makes all characters small. Use your static method to prepare the output. 
In the new output print the number of the instantiated class.
Input	Output
Bat Giorgi	488-Spider/Brakes!/Zadu6avam sA!/bat-giorgi/ inst. 1
Dinko	488-Spider/Brakes!/Zadu6avam sA!/dinko/ inst. 2


Problem 4.	Telephony
You have a business - manufacturing cell phones. But you have no software developers, so you call your friends and ask them to help you create a cell phone software. They agree and you start working on the project. The project consists of one main model - a Smartphone. Each of your smartphones should have functionalities of calling other phones and browsing in the world wide web.
Your friends are very busy, so you decide to write the code on your own. Here is the mandatory assignment:
You should have a model - Smartphone and two separate functionalities which your smartphone has - to call other phones and to browse in the world wide web. You should end up with one class and two interfaces.
Input
The input comes from the console (CLI). It will hold two lines:
•	First line: phone numbers to call (String), separated by spaces.
•	Second line: sites to visit (String), separated by spaces.
Output
•	First call all numbers in the order of input then browse all sites in order of input
•	The functionality of calling phones is printing on the console the number which are being called in the format:
Calling... <number>
•	The functionality of the browser should print on the console the site in format:
Browsing: <site>!
•	If there is a number in the input of the URLs, print: "Invalid URL!" and continue printing the rest of the URLs.
•	If there is a character different from a digit in a number, print: "Invalid number!" and continue to the next number.
Constraints
•	Each site's URL should consist only of letters and symbols (No digits are allowed in the URL address)

Examples
Input	Output
0882134215 0882134333 08992134215 0558123 3333 1
http://softuni.bg http://youtube.com http://www.g00gle.com	Calling... 0882134215
Calling... 0882134333
Calling... 08992134215
Calling... 0558123
Calling... 3333
Calling... 1
Browsing: http://softuni.bg!
Browsing: http://youtube.com!
Invalid URL!

Problem 5.	Border Control
It’s the future, you’re the ruler of a totalitarian dystopian society inhabited by citizens and robots, since you’re afraid of rebellions you decide to implement strict control of who enters your city. Your soldiers check the Ids of everyone who enters and leaves. Define an Interface which should be implemented by both citizens and robots. 
Input
You will receive from the console an unknown amount of lines until the command “End” is received, on each line there will be the information for either a citizen or a robot who tries to enter your city in the format “<name> <age> <id>” for citizens and “<model> <id>” for robots. After the end command on the next line you will receive a single number representing the last digits of fake ids, all citizens or robots whose Id ends with the specified digits must be detained.
Output
The output of your program should consist of all detained Ids each on a separate line (print in the same order of appearance).
Examples
Input	Output
Pesho 22 9010101122
MK-13 558833251
MK-12 33283122
End
122	9010101122
33283122

Toncho 31 7801211340
Penka 29 8007181534
IV-228 999999
Stamat 54 3401018380
KKK-666 80808080
End
340	7801211340


Problem 6.	Birthday Celebrations
It is a well known fact that people celebrate birthdays, it is also known that some people also celebrate their pets birthdays. Extend the program from your last task to add birthdates to citizens and include a class Pet, pets have a name and a birthdate. Encompass repeated functionality into interfaces and implement them in your classes. 
You will receive from the console an unknown amount of lines until the command “End” is received,  each line will contain information in one of the following formats “Citizen <name> <age> <id> <birthdate>” for citizens, “Robot <model> <id>” for robots or “Pet <name> <birthdate>” for pets. After the end command on the next line you will receive a single number representing a specific year, your task is to print all birthdates (of both citizens and pets) in that year in the format day/month/year (print in order of appearance).
Examples
Input	Output
Citizen Pesho 22 9010101122 10/10/1990
Pet Sharo 13/11/2005
Robot MK-13 558833251
End
1990	10/10/1990
Citizen Stamat 16 0041018380 01/01/2000
Robot MK-10 12345678
Robot PP-09 00000001
Pet Topcho 24/12/2000
Pet Kosmat 12/06/2002 
End
2000	01/01/2000
24/12/2000
Robot VV-XYZ 11213141
Citizen Penka 35 7903210713 21/03/1979
Citizen Kane 40 7409073566 07/09/1974
End
1975	<no output>

Problem 7. Vehicles
Write a program that models 2 vehicles (Car and Truck) and will be able to simulate driving and refueling them. Car and truck both have fuel quantity, fuel consumption in liters per km and can be driven given distance and refueled with given liters. But in the summer both vehicles use air conditioner and their fuel consumption per km is increased by 0.9 liters for the car and with 1.6 liters for the truck. Also the truck has a tiny hole in his tank and when it gets refueled it gets only 95% of given fuel. The car has no problems when refueling and adds all given fuel to its tank. If vehicle cannot travel given distance its fuel does not change.
Input
•	On the first line - information about the car in format {Car {fuel quantity} {liters per km}}
•	On the second line – info about the truck in format {Truck {fuel quantity} {liters per km}}
•	On third line - number of commands N that will be given on the next N lines
•	On the next N lines – commands in format
o	Drive Car {distance}
o	Dive Truck {distance}
o	Refuel Car {liters}
o	Refuel Truck {liters}
Output
After each Drive command print whether the Car/Truck was able to travel given distance in format if it’s successful. Print the distance with all digits after the decimal separator except trailing zeros. 
Car/Truck travelled {distance} km
Or if it is not:
Car/Truck needs refueling
Finally print the remaining fuel for both car and truck rounded 2 digits after floating point in format:
Car: {liters}
Truck: {liters}

Example
Input	Output
Car 15 0.3
Truck 100 0.9
4
Drive Car 9
Drive Car 30
Refuel Car 50
Drive Truck 10	Car travelled 9 km
Car needs refueling
Truck travelled 10 km
Car: 54.20
Truck: 75.00
Car 30.4 0.4
Truck 99.34 0.9
5
Drive Car 500
Drive Car 13.5
Refuel Truck 10.300
Drive Truck 56.2
Refuel Car 100.2	Car needs refueling
Car travelled 13.5 km
Truck needs refueling
Car: 113.05
Truck: 109.13



Poblem 8. Wild Farm Hierarchy
Your task is to create a class hierarchy like the picture below. All the classes except Vegetable, Meat, Mouse, Tiger, Cat & Zebra should be abstract. 
Input should be read from the console. Every even line will contain information about the Animal in following format:
{AnimalType} {AnimalName} {AnimalWeight} {AnimalLivingRegion} [{CatBreed} = Only if its cat]
On the odd lines you will receive information about the food that you should give to the Animal. The line will consist of FoodType and quantity separated by a whitespace.



You should build the logic to determine if the animal is going to eat the provided food. The Mouse and Zebra should check if the food is a Vegetable. If it is they will eat it. Otherwise you should print a message in the format:
{AnimalType} are not eating that type of food!

Cats eat any kind of food, but Tigers accept only Meat. If Vegetable is provided to a tiger message like the one above should be printed on the console.

{AnimalType} [{AnimalName}, {CatBreed}, {AnimalWeight}, {AnimalLivingRegion}, {FoodEaten}]

Print all AnimalWeight with no trailing zeroes after the decimal separator. 
After you read information about the Animal and Food then invoke makeSound method of the current animal and then feed it. At the end print the whole object and proceed reading information about the next animal/food. The input will continue until you receive “End” for animal information.
Input	Output
Cat Gray 1.1 Home Persian
Vegetable 4
End	Meowwww
Cat[Gray, Persian, 1.1, Home, 4]
Tiger Typcho 167.7 Asia
Vegetable 1
End	ROAAR!!!
Tigers are not eating that type of food!
Tiger[Typcho, 167.7, Asia, 0]
Zebra Doncho 500 Africa
Vegetable 150
End	Zs
Zebra[Doncho, 500, Africa, 150]
Mouse Jerry 0.5 Anywhere
Vegetable 0
End	SQUEEEAAAK!
 Mouse[Jerry, 0.5, Anywhere, 0]

